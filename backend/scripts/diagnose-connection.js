import fetch from 'node-fetch'

async function diagnoseConnection() {
  console.log('üîç Diagn√≥stico completo de conexi√≥n...')
  
  try {
    // 1. Verificar si el backend est√° ejecut√°ndose
    console.log('\n1Ô∏è‚É£ Verificando backend...')
    const healthResponse = await fetch('http://localhost:3000/health')
    
    if (healthResponse.ok) {
      console.log('‚úÖ Backend funcionando en puerto 3000')
    } else {
      console.log('‚ùå Backend no responde en puerto 3000')
      console.log('üí° Verificar que el backend est√© ejecut√°ndose')
      return
    }
    
    // 2. Probar autenticaci√≥n
    console.log('\n2Ô∏è‚É£ Probando autenticaci√≥n...')
    const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'guardia@pepsico.cl',
        password: 'admin123'
      })
    })
    
    if (!loginResponse.ok) {
      console.log('‚ùå Error en autenticaci√≥n:', loginResponse.status)
      return
    }
    
    const loginData = await loginResponse.json()
    console.log('‚úÖ Autenticaci√≥n exitosa')
    console.log('   Usuario:', loginData.data.user.firstName)
    console.log('   Token:', loginData.data.accessToken ? 'Presente' : 'Ausente')
    
    // 3. Probar API de ingresos
    console.log('\n3Ô∏è‚É£ Probando API de ingresos...')
    const entriesResponse = await fetch('http://localhost:3000/api/vehicle-entries', {
      headers: {
        'Authorization': `Bearer ${loginData.data.accessToken}`,
        'Content-Type': 'application/json'
      }
    })
    
    if (!entriesResponse.ok) {
      console.log('‚ùå Error en API de ingresos:', entriesResponse.status)
      return
    }
    
    const entriesData = await entriesResponse.json()
    console.log('‚úÖ API de ingresos funcionando')
    console.log('   Total ingresos:', entriesData.data?.length || 0)
    
    // 4. Probar API de ingresos activos
    console.log('\n4Ô∏è‚É£ Probando API de ingresos activos...')
    const activeResponse = await fetch('http://localhost:3000/api/vehicle-entries/active', {
      headers: {
        'Authorization': `Bearer ${loginData.data.accessToken}`,
        'Content-Type': 'application/json'
      }
    })
    
    if (!activeResponse.ok) {
      console.log('‚ùå Error en API de ingresos activos:', activeResponse.status)
      return
    }
    
    const activeData = await activeResponse.json()
    console.log('‚úÖ API de ingresos activos funcionando')
    console.log('   Ingresos activos:', activeData.data?.length || 0)
    
    // 5. Calcular estad√≠sticas
    console.log('\n5Ô∏è‚É£ Calculando estad√≠sticas...')
    const today = new Date().toISOString().split('T')[0]
    const entriesToday = entriesData.data?.filter(entry => 
      entry.entryDate.startsWith(today)
    ).length || 0
    
    const exitsToday = entriesData.data?.filter(entry => 
      entry.exitDate && entry.exitDate.startsWith(today)
    ).length || 0
    
    console.log('üìä Estad√≠sticas calculadas:')
    console.log(`   Veh√≠culos en taller: ${activeData.data?.length || 0}`)
    console.log(`   Ingresos hoy: ${entriesToday}`)
    console.log(`   Salidas hoy: ${exitsToday}`)
    console.log(`   Total ingresos: ${entriesData.data?.length || 0}`)
    
    // 6. Verificar datos espec√≠ficos
    console.log('\n6Ô∏è‚É£ Verificando datos espec√≠ficos...')
    if (entriesData.data && entriesData.data.length > 0) {
      console.log('üìã Primeros ingresos:')
      entriesData.data.slice(0, 3).forEach((entry, index) => {
        console.log(`   ${index + 1}. ${entry.vehicle?.licensePlate} - ${entry.driverName}`)
        console.log(`      Fecha: ${entry.entryDate}`)
        console.log(`      Salida: ${entry.exitDate || 'Sin salida'}`)
      })
    }
    
    console.log('\n‚úÖ Diagn√≥stico completo: TODO FUNCIONANDO')
    console.log('üí° El frontend deber√≠a mostrar estos datos autom√°ticamente')
    
  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error.message)
    console.log('\nüîß Posibles soluciones:')
    console.log('   1. Verificar que el backend est√© ejecut√°ndose en puerto 3000')
    console.log('   2. Verificar que el frontend est√© configurado para puerto 3000')
    console.log('   3. Verificar que no haya problemas de CORS')
    console.log('   4. Verificar que el usuario est√© autenticado en el frontend')
  }
}

diagnoseConnection()
