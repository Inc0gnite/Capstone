import prisma from '../src/config/database'

/**
 * Script para limpiar registros de veh√≠culos ingresados que nunca completaron el proceso correctamente
 */

interface ProblematicEntry {
  id: string
  entryCode: string
  vehicleId: string
  driverName: string
  entryDate: Date
  status: string
  hasWorkOrders: boolean
  hasPhotos: boolean
  hasKeyControl: boolean
  issues: string[]
}

async function identifyProblematicEntries(): Promise<ProblematicEntry[]> {
  console.log('üîç Identificando registros problem√°ticos...')
  
  // Buscar todos los ingresos con estado "ingresado" que podr√≠an ser problem√°ticos
  const entries = await prisma.vehicleEntry.findMany({
    where: {
      status: 'ingresado',
      exitDate: null
    },
    include: {
      workOrders: true,
      photos: true,
      keyControl: true,
      vehicle: true
    }
  })

  console.log(`üìä Total de ingresos activos encontrados: ${entries.length}`)

  const problematicEntries: ProblematicEntry[] = []

  for (const entry of entries) {
    const issues: string[] = []
    
    // Verificar si tiene √≥rdenes de trabajo
    if (entry.workOrders.length === 0) {
      issues.push('Sin √≥rdenes de trabajo')
    }
    
    // Verificar si tiene fotos
    if (entry.photos.length === 0) {
      issues.push('Sin fotos del veh√≠culo')
    }
    
    // Verificar si tiene control de llaves
    if (!entry.keyControl) {
      issues.push('Sin control de llaves')
    }
    
    // Verificar si el veh√≠culo existe
    if (!entry.vehicle) {
      issues.push('Veh√≠culo no existe')
    }
    
    // Verificar si la fecha de ingreso es muy antigua (m√°s de 30 d√≠as)
    const daysSinceEntry = Math.floor((Date.now() - entry.entryDate.getTime()) / (1000 * 60 * 60 * 24))
    if (daysSinceEntry > 30) {
      issues.push(`Ingreso muy antiguo (${daysSinceEntry} d√≠as)`)
    }
    
    // Verificar si el c√≥digo de ingreso es v√°lido
    if (!entry.entryCode || entry.entryCode.length < 10) {
      issues.push('C√≥digo de ingreso inv√°lido')
    }
    
    // Si tiene m√∫ltiples problemas, es probable que sea un registro problem√°tico
    if (issues.length >= 2) {
      problematicEntries.push({
        id: entry.id,
        entryCode: entry.entryCode,
        vehicleId: entry.vehicleId,
        driverName: entry.driverName,
        entryDate: entry.entryDate,
        status: entry.status,
        hasWorkOrders: entry.workOrders.length > 0,
        hasPhotos: entry.photos.length > 0,
        hasKeyControl: !!entry.keyControl,
        issues
      })
    }
  }

  return problematicEntries
}

async function cleanupProblematicEntries(entries: ProblematicEntry[], dryRun: boolean = true): Promise<void> {
  console.log(`\nüßπ ${dryRun ? 'SIMULACI√ìN' : 'ELIMINANDO'} registros problem√°ticos...`)
  
  for (const entry of entries) {
    console.log(`\nüìã Registro: ${entry.entryCode}`)
    console.log(`   Conductor: ${entry.driverName}`)
    console.log(`   Fecha: ${entry.entryDate.toLocaleDateString('es-CL')}`)
    console.log(`   Problemas: ${entry.issues.join(', ')}`)
    
    if (!dryRun) {
      try {
        // Eliminar en orden correcto para evitar problemas de foreign key
        await prisma.$transaction(async (tx) => {
          // 1. Eliminar fotos
          await tx.vehicleEntryPhoto.deleteMany({
            where: { entryId: entry.id }
          })
          
          // 2. Eliminar control de llaves
          await tx.keyControl.deleteMany({
            where: { entryId: entry.id }
          })
          
          // 3. Eliminar √≥rdenes de trabajo relacionadas
          await tx.workOrder.deleteMany({
            where: { entryId: entry.id }
          })
          
          // 4. Eliminar el ingreso
          await tx.vehicleEntry.delete({
            where: { id: entry.id }
          })
        })
        
        console.log(`   ‚úÖ Eliminado exitosamente`)
      } catch (error) {
        console.log(`   ‚ùå Error al eliminar: ${error}`)
      }
    } else {
      console.log(`   üîç [SIMULACI√ìN] Se eliminar√≠a este registro`)
    }
  }
}

async function main() {
  try {
    console.log('üöÄ Iniciando limpieza de registros problem√°ticos...\n')
    
    // Identificar registros problem√°ticos
    const problematicEntries = await identifyProblematicEntries()
    
    console.log(`\nüìä Resumen:`)
    console.log(`   Total de registros problem√°ticos encontrados: ${problematicEntries.length}`)
    
    if (problematicEntries.length === 0) {
      console.log('‚úÖ No se encontraron registros problem√°ticos')
      return
    }
    
    // Mostrar detalles
    console.log('\nüìã Detalles de registros problem√°ticos:')
    problematicEntries.forEach((entry, index) => {
      console.log(`\n${index + 1}. ${entry.entryCode}`)
      console.log(`   Conductor: ${entry.driverName}`)
      console.log(`   Fecha: ${entry.entryDate.toLocaleDateString('es-CL')}`)
      console.log(`   Problemas: ${entry.issues.join(', ')}`)
    })
    
    // Preguntar si continuar
    console.log('\n‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n eliminar√° permanentemente los registros problem√°ticos.')
    console.log('   Aseg√∫rate de hacer un backup de la base de datos antes de continuar.')
    
    // Por ahora, solo mostrar la simulaci√≥n
    await cleanupProblematicEntries(problematicEntries, true)
    
    console.log('\n‚úÖ Simulaci√≥n completada. Para ejecutar la limpieza real, modifica el script.')
    
  } catch (error) {
    console.error('‚ùå Error durante la limpieza:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar el script
main()









