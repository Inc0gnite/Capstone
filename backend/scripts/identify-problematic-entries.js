const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function identifyProblematicEntries() {
  try {
    console.log('üîç Analizando registros de veh√≠culos ingresados...\n')
    
    // Obtener estad√≠sticas generales
    const totalEntries = await prisma.vehicleEntry.count()
    const activeEntries = await prisma.vehicleEntry.count({
      where: { status: 'ingresado', exitDate: null }
    })
    
    console.log('üìä Estad√≠sticas generales:')
    console.log(`   Total de ingresos: ${totalEntries}`)
    console.log(`   Ingresos activos: ${activeEntries}`)
    
    // Buscar ingresos problem√°ticos
    const problematicEntries = await prisma.vehicleEntry.findMany({
      where: {
        status: 'ingresado',
        exitDate: null
      },
      include: {
        workOrders: true,
        photos: true,
        keyControl: true,
        vehicle: true
      }
    })

    console.log(`\nüîç Analizando ${problematicEntries.length} ingresos activos...\n`)

    const issues = {
      noWorkOrders: [],
      noPhotos: [],
      noKeyControl: [],
      invalidEntryCode: [],
      oldEntries: [],
      noVehicle: []
    }

    problematicEntries.forEach(entry => {
      const entryAge = Math.floor((Date.now() - entry.entryDate.getTime()) / (1000 * 60 * 60 * 24))
      
      // Sin √≥rdenes de trabajo
      if (entry.workOrders.length === 0) {
        issues.noWorkOrders.push(entry)
      }
      
      // Sin fotos
      if (entry.photos.length === 0) {
        issues.noPhotos.push(entry)
      }
      
      // Sin control de llaves
      if (!entry.keyControl) {
        issues.noKeyControl.push(entry)
      }
      
      // C√≥digo de ingreso inv√°lido
      if (!entry.entryCode || entry.entryCode.includes('N/A') || entry.entryCode.length < 10) {
        issues.invalidEntryCode.push(entry)
      }
      
      // Ingresos muy antiguos (m√°s de 7 d√≠as)
      if (entryAge > 7) {
        issues.oldEntries.push(entry)
      }
      
      // Veh√≠culo no existe
      if (!entry.vehicle) {
        issues.noVehicle.push(entry)
      }
    })

    // Mostrar resultados
    console.log('üìã An√°lisis de problemas:')
    console.log(`   Sin √≥rdenes de trabajo: ${issues.noWorkOrders.length}`)
    console.log(`   Sin fotos: ${issues.noPhotos.length}`)
    console.log(`   Sin control de llaves: ${issues.noKeyControl.length}`)
    console.log(`   C√≥digo inv√°lido: ${issues.invalidEntryCode.length}`)
    console.log(`   Muy antiguos (>7 d√≠as): ${issues.oldEntries.length}`)
    console.log(`   Sin veh√≠culo: ${issues.noVehicle.length}`)

    // Identificar registros que deber√≠an eliminarse
    const toDelete = []
    
    problematicEntries.forEach(entry => {
      let problems = 0
      const entryAge = Math.floor((Date.now() - entry.entryDate.getTime()) / (1000 * 60 * 60 * 24))
      
      if (entry.workOrders.length === 0) problems++
      if (entry.photos.length === 0) problems++
      if (!entry.keyControl) problems++
      if (!entry.entryCode || entry.entryCode.includes('N/A')) problems++
      if (!entry.vehicle) problems++
      if (entryAge > 7) problems++
      
      // Si tiene 3 o m√°s problemas, es probable que sea un registro problem√°tico
      if (problems >= 3) {
        toDelete.push({
          ...entry,
          problems,
          entryAge
        })
      }
    })

    console.log(`\n‚ö†Ô∏è  Registros recomendados para eliminaci√≥n: ${toDelete.length}`)
    
    if (toDelete.length > 0) {
      console.log('\nüìã Detalles de registros a eliminar:')
      toDelete.forEach((entry, index) => {
        console.log(`\n${index + 1}. ${entry.entryCode}`)
        console.log(`   Conductor: ${entry.driverName}`)
        console.log(`   Fecha: ${entry.entryDate.toLocaleDateString('es-CL')}`)
        console.log(`   Antig√ºedad: ${entry.entryAge} d√≠as`)
        console.log(`   Problemas: ${entry.problems}`)
        console.log(`   √ìrdenes: ${entry.workOrders.length}`)
        console.log(`   Fotos: ${entry.photos.length}`)
        console.log(`   Control llaves: ${entry.keyControl ? 'S√≠' : 'No'}`)
      })
    }

    console.log('\n‚úÖ An√°lisis completado')
    console.log('\nüí° Para eliminar estos registros, ejecuta el script de limpieza.')
    
  } catch (error) {
    console.error('‚ùå Error durante el an√°lisis:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar el an√°lisis
identifyProblematicEntries()









