import { PrismaClient } from '@prisma/client'
import * as bcrypt from 'bcrypt'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Iniciando seed de la base de datos...')

  // Limpiar base de datos (opcional, comentar en producci√≥n)
  console.log('üóëÔ∏è  Limpiando base de datos...')
  await prisma.auditLog.deleteMany()
  await prisma.notification.deleteMany()
  await prisma.document.deleteMany()
  await prisma.sparePartMovement.deleteMany()
  await prisma.workOrderSparePart.deleteMany()
  await prisma.sparePart.deleteMany()
  await prisma.workPause.deleteMany()
  await prisma.workOrderPhoto.deleteMany()
  await prisma.workOrderStatus.deleteMany()
  await prisma.workOrder.deleteMany()
  await prisma.keyControl.deleteMany()
  await prisma.vehicleEntry.deleteMany()
  await prisma.vehicle.deleteMany()
  await prisma.workshopSchedule.deleteMany()
  await prisma.user.deleteMany()
  await prisma.workshop.deleteMany()
  await prisma.region.deleteMany()
  await prisma.rolePermission.deleteMany()
  await prisma.permission.deleteMany()
  await prisma.role.deleteMany()

  // ============================================================================
  // 1. ROLES Y PERMISOS
  // ============================================================================
  console.log('üë• Creando roles y permisos...')

  const roles = await Promise.all([
    prisma.role.create({
      data: {
        name: 'Administrador',
        description: 'Acceso total al sistema',
      },
    }),
    prisma.role.create({
      data: {
        name: 'Guardia',
        description: 'Control de acceso vehicular',
      },
    }),
    prisma.role.create({
      data: {
        name: 'Recepcionista',
        description: 'Gesti√≥n de ingresos y √≥rdenes',
      },
    }),
    prisma.role.create({
      data: {
        name: 'Mec√°nico',
        description: 'Ejecuci√≥n de trabajos',
      },
    }),
    prisma.role.create({
      data: {
        name: 'Jefe de Taller',
        description: 'Supervisi√≥n del taller',
      },
    }),
    prisma.role.create({
      data: {
        name: 'Encargado de Inventario',
        description: 'Gesti√≥n de repuestos',
      },
    }),
  ])

  const permissions = await Promise.all([
    // Dashboard
    prisma.permission.create({
      data: { resource: 'dashboard', action: 'read', description: 'Ver dashboard' },
    }),

    // Usuarios
    prisma.permission.create({
      data: { resource: 'users', action: 'read', description: 'Ver usuarios' },
    }),
    prisma.permission.create({
      data: { resource: 'users', action: 'create', description: 'Crear usuarios' },
    }),
    prisma.permission.create({
      data: { resource: 'users', action: 'update', description: 'Actualizar usuarios' },
    }),
    prisma.permission.create({
      data: { resource: 'users', action: 'delete', description: 'Eliminar usuarios' },
    }),

    // Veh√≠culos
    prisma.permission.create({
      data: { resource: 'vehicles', action: 'read', description: 'Ver veh√≠culos' },
    }),
    prisma.permission.create({
      data: { resource: 'vehicles', action: 'create', description: 'Crear veh√≠culos' },
    }),
    prisma.permission.create({
      data: { resource: 'vehicles', action: 'update', description: 'Actualizar veh√≠culos' },
    }),
    prisma.permission.create({
      data: { resource: 'vehicles', action: 'delete', description: 'Eliminar veh√≠culos' },
    }),

    // Ingresos
    prisma.permission.create({
      data: {
        resource: 'vehicle-entries',
        action: 'read',
        description: 'Ver ingresos',
      },
    }),
    prisma.permission.create({
      data: {
        resource: 'vehicle-entries',
        action: 'create',
        description: 'Crear ingresos',
      },
    }),
    prisma.permission.create({
      data: {
        resource: 'vehicle-entries',
        action: 'update',
        description: 'Actualizar ingresos',
      },
    }),

    // √ìrdenes de trabajo
    prisma.permission.create({
      data: {
        resource: 'work-orders',
        action: 'read',
        description: 'Ver √≥rdenes',
      },
    }),
    prisma.permission.create({
      data: {
        resource: 'work-orders',
        action: 'create',
        description: 'Crear √≥rdenes',
      },
    }),
    prisma.permission.create({
      data: {
        resource: 'work-orders',
        action: 'update',
        description: 'Actualizar √≥rdenes',
      },
    }),

    // Repuestos
    prisma.permission.create({
      data: {
        resource: 'spare-parts',
        action: 'read',
        description: 'Ver repuestos',
      },
    }),
    prisma.permission.create({
      data: {
        resource: 'spare-parts',
        action: 'create',
        description: 'Crear repuestos',
      },
    }),
    prisma.permission.create({
      data: {
        resource: 'spare-parts',
        action: 'update',
        description: 'Actualizar repuestos',
      },
    }),

    // Talleres y regiones
    prisma.permission.create({
      data: { resource: 'workshops', action: 'read', description: 'Ver talleres' },
    }),
    prisma.permission.create({
      data: { resource: 'regions', action: 'read', description: 'Ver regiones' },
    }),
  ])

  // Asignar todos los permisos al rol Admin
  await Promise.all(
    permissions.map((permission) =>
      prisma.rolePermission.create({
        data: {
          roleId: roles[0].id, // Administrador
          permissionId: permission.id,
        },
      })
    )
  )

  // Asignar permisos espec√≠ficos a otros roles
  // Guardia: ver veh√≠culos e ingresos, crear ingresos
  await Promise.all([
    prisma.rolePermission.create({
      data: {
        roleId: roles[1].id,
        permissionId: permissions[0].id, // dashboard
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[1].id,
        permissionId: permissions[5].id, // vehicles:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[1].id,
        permissionId: permissions[6].id, // vehicles:create
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[1].id,
        permissionId: permissions[9].id, // vehicle-entries:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[1].id,
        permissionId: permissions[10].id, // vehicle-entries:create
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[1].id,
        permissionId: permissions[11].id, // vehicle-entries:update
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[1].id,
        permissionId: permissions[17].id, // regions:read
      },
    }),
  ])

  // Recepcionista: ver veh√≠culos, ingresos, √≥rdenes de trabajo, dashboard
  await Promise.all([
    prisma.rolePermission.create({
      data: {
        roleId: roles[2].id, // Recepcionista
        permissionId: permissions[0].id, // dashboard:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[2].id, // Recepcionista
        permissionId: permissions[5].id, // vehicles:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[2].id, // Recepcionista
        permissionId: permissions[9].id, // vehicle-entries:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[2].id, // Recepcionista
        permissionId: permissions[10].id, // vehicle-entries:create
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[2].id, // Recepcionista
        permissionId: permissions[11].id, // vehicle-entries:update
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[2].id, // Recepcionista
        permissionId: permissions[12].id, // work-orders:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[2].id, // Recepcionista
        permissionId: permissions[13].id, // work-orders:create
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[2].id, // Recepcionista
        permissionId: permissions[14].id, // work-orders:update
      },
    }),
  ])

  // Mec√°nico: ver dashboard, √≥rdenes de trabajo (propias), repuestos
  await Promise.all([
    prisma.rolePermission.create({
      data: {
        roleId: roles[3].id, // Mec√°nico
        permissionId: permissions[0].id, // dashboard:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[3].id, // Mec√°nico
        permissionId: permissions[12].id, // work-orders:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[3].id, // Mec√°nico
        permissionId: permissions[14].id, // work-orders:update
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[3].id, // Mec√°nico
        permissionId: permissions[15].id, // spare-parts:read
      },
    }),
  ])

  // Jefe de Taller: Dashboard, √≥rdenes de trabajo completas, veh√≠culos, repuestos (gestionar inventario)
  await Promise.all([
    prisma.rolePermission.create({
      data: {
        roleId: roles[4].id, // Jefe de Taller
        permissionId: permissions[0].id, // dashboard:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[4].id, // Jefe de Taller
        permissionId: permissions[5].id, // vehicles:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[4].id, // Jefe de Taller
        permissionId: permissions[9].id, // vehicle-entries:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[4].id, // Jefe de Taller
        permissionId: permissions[12].id, // work-orders:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[4].id, // Jefe de Taller
        permissionId: permissions[13].id, // work-orders:create
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[4].id, // Jefe de Taller
        permissionId: permissions[14].id, // work-orders:update
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[4].id, // Jefe de Taller
        permissionId: permissions[15].id, // spare-parts:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[4].id, // Jefe de Taller
        permissionId: permissions[16].id, // spare-parts:create
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[4].id, // Jefe de Taller
        permissionId: permissions[17].id, // spare-parts:update
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[4].id, // Jefe de Taller
        permissionId: permissions[18].id, // workshops:read
      },
    }),
    prisma.rolePermission.create({
      data: {
        roleId: roles[4].id, // Jefe de Taller
        permissionId: permissions[19].id, // regions:read
      },
    }),
  ])

  console.log(`‚úÖ Creados ${roles.length} roles y ${permissions.length} permisos`)

  // ============================================================================
  // 2. REGIONES Y TALLERES
  // ============================================================================
  console.log('üè≠ Creando regiones y talleres...')

  const regions = await Promise.all([
    prisma.region.create({ data: { code: 'RM', name: 'Regi√≥n Metropolitana' } }),
    prisma.region.create({ data: { code: 'V', name: 'Regi√≥n de Valpara√≠so' } }),
    prisma.region.create({ data: { code: 'VIII', name: 'Regi√≥n del Biob√≠o' } }),
  ])

  const workshops = await Promise.all([
    prisma.workshop.create({
      data: {
        code: 'TAL-RM-01',
        name: 'Taller Quilicura',
        regionId: regions[0].id,
        address: 'Av. Los Pajaritos 1234',
        city: 'Quilicura',
        phone: '+56223456789',
        capacity: 20,
        maxOrdersPerMechanic: 4, // L√≠mite base de √≥rdenes (ahora basado en horas)
      },
    }),
    prisma.workshop.create({
      data: {
        code: 'TAL-RM-02',
        name: 'Taller Maip√∫',
        regionId: regions[0].id,
        address: 'Camino a Melipilla 5678',
        city: 'Maip√∫',
        phone: '+56223456790',
        capacity: 15,
        maxOrdersPerMechanic: 4, // L√≠mite base de √≥rdenes (ahora basado en horas)
      },
    }),
    prisma.workshop.create({
      data: {
        code: 'TAL-V-01',
        name: 'Taller Valpara√≠so',
        regionId: regions[1].id,
        address: 'Av. Argentina 9876',
        city: 'Valpara√≠so',
        phone: '+56322345678',
        capacity: 10,
        maxOrdersPerMechanic: 4, // L√≠mite base de √≥rdenes (ahora basado en horas)
      },
    }),
  ])

  // Horarios para talleres (Lunes a Viernes)
  for (const workshop of workshops.slice(0, 2)) {
    for (let day = 1; day <= 5; day++) {
      await prisma.workshopSchedule.create({
        data: {
          workshopId: workshop.id,
          dayOfWeek: day,
          openTime: '08:00',
          closeTime: '18:00',
        },
      })
    }
  }

  console.log(`‚úÖ Creadas ${regions.length} regiones y ${workshops.length} talleres`)

  // ============================================================================
  // 3. USUARIOS
  // ============================================================================
  console.log('üë§ Creando usuarios...')

  const hashedPassword = await bcrypt.hash('admin123', 10)

  const users = await Promise.all([
    prisma.user.create({
      data: {
        rut: '12.345.678-9',
        firstName: 'Juan',
        lastName: 'P√©rez',
        email: 'admin@pepsico.cl',
        password: hashedPassword,
        phone: '+56912345678',
        roleId: roles[0].id, // Admin
      },
    }),
    prisma.user.create({
      data: {
        rut: '23.456.789-0',
        firstName: 'Mar√≠a',
        lastName: 'Gonz√°lez',
        email: 'guardia@pepsico.cl',
        password: hashedPassword,
        phone: '+56987654321',
        roleId: roles[1].id, // Guardia
        workshopId: workshops[0].id,
      },
    }),
    prisma.user.create({
      data: {
        rut: '34.567.890-1',
        firstName: 'Pedro',
        lastName: 'Rodr√≠guez',
        email: 'recepcion@pepsico.cl',
        password: hashedPassword,
        phone: '+56911111111',
        roleId: roles[2].id, // Recepcionista
        workshopId: workshops[0].id,
      },
    }),
    prisma.user.create({
      data: {
        rut: '45.678.901-2',
        firstName: 'Carlos',
        lastName: 'Silva',
        email: 'mecanico1@pepsico.cl',
        password: hashedPassword,
        phone: '+56922222222',
        roleId: roles[3].id, // Mec√°nico
        workshopId: workshops[0].id,
      },
    }),
    prisma.user.create({
      data: {
        rut: '56.789.012-3',
        firstName: 'Ana',
        lastName: 'Mart√≠nez',
        email: 'mecanico2@pepsico.cl',
        password: hashedPassword,
        phone: '+56933333333',
        roleId: roles[3].id, // Mec√°nico
        workshopId: workshops[0].id,
      },
    }),
    prisma.user.create({
      data: {
        rut: '67.890.123-4',
        firstName: 'Luis',
        lastName: 'L√≥pez',
        email: 'jefe@pepsico.cl',
        password: hashedPassword,
        phone: '+56944444444',
        roleId: roles[4].id, // Jefe de Taller
        workshopId: workshops[0].id,
      },
    }),
  ])

  console.log(`‚úÖ Creados ${users.length} usuarios`)

  // ============================================================================
  // 4. VEH√çCULOS
  // ============================================================================
  console.log('üöö Creando veh√≠culos...')

  const vehicles = await Promise.all([
    prisma.vehicle.create({
      data: {
        licensePlate: 'ABCD12',
        vehicleType: 'Cami√≥n',
        brand: 'Mercedes-Benz',
        model: 'Actros 2644',
        year: 2020,
        vin: 'WDB9632401L123456',
        fleetNumber: 'FL-001',
        regionId: regions[0].id,
        status: 'active',
      },
    }),
    prisma.vehicle.create({
      data: {
        licensePlate: 'EFGH34',
        vehicleType: 'Camioneta',
        brand: 'Toyota',
        model: 'Hilux',
        year: 2021,
        vin: 'JTEBU4BF0BK123456',
        fleetNumber: 'FL-002',
        regionId: regions[0].id,
        status: 'active',
      },
    }),
    prisma.vehicle.create({
      data: {
        licensePlate: 'IJKL56',
        vehicleType: 'Cami√≥n',
        brand: 'Volvo',
        model: 'FH16',
        year: 2019,
        fleetNumber: 'FL-003',
        regionId: regions[1].id,
        status: 'active',
      },
    }),
    prisma.vehicle.create({
      data: {
        licensePlate: 'MNOP78',
        vehicleType: 'Furg√≥n',
        brand: 'Ford',
        model: 'Transit',
        year: 2022,
        fleetNumber: 'FL-004',
        regionId: regions[0].id,
        status: 'in_maintenance',
      },
    }),
  ])

  console.log(`‚úÖ Creados ${vehicles.length} veh√≠culos`)

  // ============================================================================
  // 5. REPUESTOS
  // ============================================================================
  console.log('üîß Creando repuestos...')

  const spareParts = await Promise.all([
    prisma.sparePart.create({
      data: {
        code: 'REP-001',
        name: 'Filtro de Aceite',
        description: 'Filtro de aceite universal',
        category: 'Filtros',
        unitOfMeasure: 'unidad',
        unitPrice: 15000,
        currentStock: 50,
        minStock: 10,
        maxStock: 100,
        location: 'Estante A1',
      },
    }),
    prisma.sparePart.create({
      data: {
        code: 'REP-002',
        name: 'Pastillas de Freno',
        description: 'Juego de pastillas delanteras',
        category: 'Frenos',
        unitOfMeasure: 'juego',
        unitPrice: 45000,
        currentStock: 25,
        minStock: 5,
        maxStock: 50,
        location: 'Estante B2',
      },
    }),
    prisma.sparePart.create({
      data: {
        code: 'REP-003',
        name: 'Aceite Motor 15W40',
        description: 'Aceite sint√©tico para motor diesel',
        category: 'Lubricantes',
        unitOfMeasure: 'litro',
        unitPrice: 8000,
        currentStock: 200,
        minStock: 50,
        maxStock: 500,
        location: 'Bodega C',
      },
    }),
    prisma.sparePart.create({
      data: {
        code: 'REP-004',
        name: 'Bater√≠a 12V',
        description: 'Bater√≠a 12V 100Ah',
        category: 'El√©ctrico',
        unitOfMeasure: 'unidad',
        unitPrice: 120000,
        currentStock: 8,
        minStock: 5,
        maxStock: 20,
        location: 'Estante D1',
      },
    }),
    prisma.sparePart.create({
      data: {
        code: 'REP-005',
        name: 'Neum√°tico 295/80R22.5',
        description: 'Neum√°tico para cami√≥n',
        category: 'Neum√°ticos',
        unitOfMeasure: 'unidad',
        unitPrice: 180000,
        currentStock: 3,
        minStock: 8,
        maxStock: 30,
        location: 'Bodega Neum√°ticos',
      },
    }),
  ])

  // Crear movimientos iniciales de stock
  for (const part of spareParts) {
    await prisma.sparePartMovement.create({
      data: {
        sparePartId: part.id,
        movementType: 'entrada',
        quantity: part.currentStock,
        previousStock: 0,
        newStock: part.currentStock,
        reason: 'Stock inicial',
      },
    })
  }

  console.log(`‚úÖ Creados ${spareParts.length} repuestos`)

  // ============================================================================
  // 6. INGRESOS DE VEH√çCULOS
  // ============================================================================
  console.log('üìù Creando ingresos de veh√≠culos...')

  const entries = await Promise.all([
    prisma.vehicleEntry.create({
      data: {
        entryCode: 'ING-20241015-0001',
        vehicleId: vehicles[3].id,
        workshopId: workshops[0].id,
        driverRut: '11.111.111-1',
        driverName: 'Roberto G√≥mez',
        driverPhone: '+56955555555',
        entryDate: new Date(),
        entryKm: 85000,
        fuelLevel: '3/4',
        hasKeys: true,
        observations: 'Veh√≠culo con ruido en el motor',
        status: 'ingresado',
        createdById: users[1].id, // Guardia
      },
    }),
  ])

  // Crear control de llaves
  await prisma.keyControl.create({
    data: {
      entryId: entries[0].id,
      keyLocation: 'Casillero 15',
    },
  })

  console.log(`‚úÖ Creados ${entries.length} ingresos`)

  // ============================================================================
  // 7. √ìRDENES DE TRABAJO
  // ============================================================================
  console.log('üî® Creando √≥rdenes de trabajo...')

  const workOrder = await prisma.workOrder.create({
    data: {
      orderNumber: 'OT-20241015-0001',
      vehicleId: vehicles[3].id,
      entryId: entries[0].id,
      workshopId: workshops[0].id,
      workType: 'Mantenimiento Preventivo',
      priority: 'media',
      description: 'Cambio de aceite, filtros y revisi√≥n general',
      estimatedHours: 4,
      assignedToId: users[3].id, // Mec√°nico 1
      currentStatus: 'en_progreso',
      startedAt: new Date(),
      createdById: users[2].id, // Recepcionista
    },
  })

  // Crear historial de estados
  await Promise.all([
    prisma.workOrderStatus.create({
      data: {
        workOrderId: workOrder.id,
        status: 'pendiente',
        observations: 'Orden creada',
        changedById: users[2].id,
        changedAt: new Date(Date.now() - 3600000), // 1 hora atr√°s
      },
    }),
    prisma.workOrderStatus.create({
      data: {
        workOrderId: workOrder.id,
        status: 'en_progreso',
        observations: 'Iniciando trabajos',
        changedById: users[3].id,
      },
    }),
  ])

  // Solicitar repuestos para la orden
  await prisma.workOrderSparePart.create({
    data: {
      workOrderId: workOrder.id,
      sparePartId: spareParts[0].id, // Filtro de aceite
      quantityRequested: 1,
      quantityDelivered: 1,
      status: 'entregado',
      deliveredAt: new Date(),
    },
  })

  console.log(`‚úÖ Creada 1 orden de trabajo`)

  // ============================================================================
  // 8. NOTIFICACIONES
  // ============================================================================
  console.log('üîî Creando notificaciones...')

  await Promise.all([
    prisma.notification.create({
      data: {
        userId: users[3].id,
        title: 'Nueva orden asignada',
        message: `Se le ha asignado la orden ${workOrder.orderNumber}`,
        type: 'work_order_assigned',
        relatedTo: 'work-orders',
        relatedId: workOrder.id,
      },
    }),
    prisma.notification.create({
      data: {
        userId: users[5].id, // Jefe de taller
        title: 'Nuevo ingreso',
        message: `Veh√≠culo ${vehicles[3].licensePlate} ingresado al taller`,
        type: 'vehicle_entry',
        relatedTo: 'vehicle-entries',
        relatedId: entries[0].id,
      },
    }),
    prisma.notification.create({
      data: {
        userId: users[5].id,
        title: 'Alerta de stock bajo',
        message: `El repuesto ${spareParts[4].name} tiene stock bajo`,
        type: 'low_stock',
        relatedTo: 'spare-parts',
        relatedId: spareParts[4].id,
        isRead: false,
      },
    }),
  ])

  console.log(`‚úÖ Creadas 3 notificaciones`)

  console.log('\nüéâ Seed completado exitosamente!')
  console.log('\nüìã Resumen:')
  console.log(`   - ${roles.length} roles`)
  console.log(`   - ${permissions.length} permisos`)
  console.log(`   - ${regions.length} regiones`)
  console.log(`   - ${workshops.length} talleres`)
  console.log(`   - ${users.length} usuarios`)
  console.log(`   - ${vehicles.length} veh√≠culos`)
  console.log(`   - ${spareParts.length} repuestos`)
  console.log(`   - ${entries.length} ingresos`)
  console.log(`   - 1 orden de trabajo`)
  console.log('\nüîê Credenciales de prueba:')
  console.log('   Admin:        admin@pepsico.cl / admin123')
  console.log('   Guardia:      guardia@pepsico.cl / admin123')
  console.log('   Recepci√≥n:    recepcion@pepsico.cl / admin123')
  console.log('   Mec√°nico:     mecanico1@pepsico.cl / admin123')
  console.log('   Jefe Taller:  jefe@pepsico.cl / admin123')
}

main()
  .catch((e) => {
    console.error('‚ùå Error durante el seed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
